Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> ATOM
Rule 2     expression -> NOT expression
Rule 3     expression -> LPAREN expression RPAREN
Rule 4     expression -> expression CONJUNCTION expression
Rule 5     expression -> expression DISJUNCTION expression
Rule 6     expression -> expression IMPLICATION expression

Terminals, with rules where they appear

ATOM                 : 1
CONJUNCTION          : 4
DISJUNCTION          : 5
IMPLICATION          : 6
LPAREN               : 3
NOT                  : 2
RPAREN               : 3
error                : 

Nonterminals, with rules where they appear

expression           : 2 3 4 4 5 5 6 6 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . ATOM
    (2) expression -> . NOT expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression CONJUNCTION expression
    (5) expression -> . expression DISJUNCTION expression
    (6) expression -> . expression IMPLICATION expression

    ATOM            shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (4) expression -> expression . CONJUNCTION expression
    (5) expression -> expression . DISJUNCTION expression
    (6) expression -> expression . IMPLICATION expression

    CONJUNCTION     shift and go to state 5
    DISJUNCTION     shift and go to state 6
    IMPLICATION     shift and go to state 7


state 2

    (1) expression -> ATOM .

    CONJUNCTION     reduce using rule 1 (expression -> ATOM .)
    DISJUNCTION     reduce using rule 1 (expression -> ATOM .)
    IMPLICATION     reduce using rule 1 (expression -> ATOM .)
    $end            reduce using rule 1 (expression -> ATOM .)
    RPAREN          reduce using rule 1 (expression -> ATOM .)


state 3

    (2) expression -> NOT . expression
    (1) expression -> . ATOM
    (2) expression -> . NOT expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression CONJUNCTION expression
    (5) expression -> . expression DISJUNCTION expression
    (6) expression -> . expression IMPLICATION expression

    ATOM            shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 8

state 4

    (3) expression -> LPAREN . expression RPAREN
    (1) expression -> . ATOM
    (2) expression -> . NOT expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression CONJUNCTION expression
    (5) expression -> . expression DISJUNCTION expression
    (6) expression -> . expression IMPLICATION expression

    ATOM            shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 9

state 5

    (4) expression -> expression CONJUNCTION . expression
    (1) expression -> . ATOM
    (2) expression -> . NOT expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression CONJUNCTION expression
    (5) expression -> . expression DISJUNCTION expression
    (6) expression -> . expression IMPLICATION expression

    ATOM            shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 10

state 6

    (5) expression -> expression DISJUNCTION . expression
    (1) expression -> . ATOM
    (2) expression -> . NOT expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression CONJUNCTION expression
    (5) expression -> . expression DISJUNCTION expression
    (6) expression -> . expression IMPLICATION expression

    ATOM            shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 11

state 7

    (6) expression -> expression IMPLICATION . expression
    (1) expression -> . ATOM
    (2) expression -> . NOT expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression CONJUNCTION expression
    (5) expression -> . expression DISJUNCTION expression
    (6) expression -> . expression IMPLICATION expression

    ATOM            shift and go to state 2
    NOT             shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 12

state 8

    (2) expression -> NOT expression .
    (4) expression -> expression . CONJUNCTION expression
    (5) expression -> expression . DISJUNCTION expression
    (6) expression -> expression . IMPLICATION expression

    CONJUNCTION     reduce using rule 2 (expression -> NOT expression .)
    DISJUNCTION     reduce using rule 2 (expression -> NOT expression .)
    IMPLICATION     reduce using rule 2 (expression -> NOT expression .)
    $end            reduce using rule 2 (expression -> NOT expression .)
    RPAREN          reduce using rule 2 (expression -> NOT expression .)

  ! CONJUNCTION     [ shift and go to state 5 ]
  ! DISJUNCTION     [ shift and go to state 6 ]
  ! IMPLICATION     [ shift and go to state 7 ]


state 9

    (3) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . CONJUNCTION expression
    (5) expression -> expression . DISJUNCTION expression
    (6) expression -> expression . IMPLICATION expression

    RPAREN          shift and go to state 13
    CONJUNCTION     shift and go to state 5
    DISJUNCTION     shift and go to state 6
    IMPLICATION     shift and go to state 7


state 10

    (4) expression -> expression CONJUNCTION expression .
    (4) expression -> expression . CONJUNCTION expression
    (5) expression -> expression . DISJUNCTION expression
    (6) expression -> expression . IMPLICATION expression

    CONJUNCTION     reduce using rule 4 (expression -> expression CONJUNCTION expression .)
    DISJUNCTION     reduce using rule 4 (expression -> expression CONJUNCTION expression .)
    IMPLICATION     reduce using rule 4 (expression -> expression CONJUNCTION expression .)
    $end            reduce using rule 4 (expression -> expression CONJUNCTION expression .)
    RPAREN          reduce using rule 4 (expression -> expression CONJUNCTION expression .)

  ! CONJUNCTION     [ shift and go to state 5 ]
  ! DISJUNCTION     [ shift and go to state 6 ]
  ! IMPLICATION     [ shift and go to state 7 ]


state 11

    (5) expression -> expression DISJUNCTION expression .
    (4) expression -> expression . CONJUNCTION expression
    (5) expression -> expression . DISJUNCTION expression
    (6) expression -> expression . IMPLICATION expression

    DISJUNCTION     reduce using rule 5 (expression -> expression DISJUNCTION expression .)
    IMPLICATION     reduce using rule 5 (expression -> expression DISJUNCTION expression .)
    $end            reduce using rule 5 (expression -> expression DISJUNCTION expression .)
    RPAREN          reduce using rule 5 (expression -> expression DISJUNCTION expression .)
    CONJUNCTION     shift and go to state 5

  ! CONJUNCTION     [ reduce using rule 5 (expression -> expression DISJUNCTION expression .) ]
  ! DISJUNCTION     [ shift and go to state 6 ]
  ! IMPLICATION     [ shift and go to state 7 ]


state 12

    (6) expression -> expression IMPLICATION expression .
    (4) expression -> expression . CONJUNCTION expression
    (5) expression -> expression . DISJUNCTION expression
    (6) expression -> expression . IMPLICATION expression

    $end            reduce using rule 6 (expression -> expression IMPLICATION expression .)
    RPAREN          reduce using rule 6 (expression -> expression IMPLICATION expression .)
    CONJUNCTION     shift and go to state 5
    DISJUNCTION     shift and go to state 6
    IMPLICATION     shift and go to state 7

  ! CONJUNCTION     [ reduce using rule 6 (expression -> expression IMPLICATION expression .) ]
  ! DISJUNCTION     [ reduce using rule 6 (expression -> expression IMPLICATION expression .) ]
  ! IMPLICATION     [ reduce using rule 6 (expression -> expression IMPLICATION expression .) ]


state 13

    (3) expression -> LPAREN expression RPAREN .

    CONJUNCTION     reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    DISJUNCTION     reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    IMPLICATION     reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 3 (expression -> LPAREN expression RPAREN .)

